#!/usr/bin/env bash

usage () {
  echo "Usage: $0 [-fsF] [remote] [root]"
  echo "-f: Force delete stale branches"
  echo "-s: Apply stashed changes after run"
  echo "-F: Force reset local root to remote root"
  echo "remote: remote name, default is origin"
  echo "root: root branch, default is master"
  exit 1;
}

while getopts "fsF" opt; do
  case $opt in
    f)
      FORCE_DELETE_STALE=true
      ;;
    s)
      APPLY_STASH=true
      ;;
    F)
      FORCE_LOCAL_RESET=true
      ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

CURRENT=$(git rev-parse --abbrev-ref HEAD)
REMOTE=${1:-origin}
ROOT=${2:-master}

STASH_STAMP=git-fresh-$(date +%s)
git stash save $STASH_STAMP

git remote update
git checkout $ROOT

if [[ "$FORCE_LOCAL_RESET" = true ]]; then
  git clean -dfx
  git reset --hard $REMOTE/$ROOT
else
  git rebase $REMOTE/$ROOT
fi

git remote prune $REMOTE

STALE=$(git branch -r --merged | grep $REMOTE | grep -Ev ">|$ROOT")
STALE=${STALE//$REMOTE\/}

if [[ -z "${STALE// }" ]]; then
  echo "No stale branches to delete"
else
  if [[ "$FORCE_DELETE_STALE" = true ]]; then
    echo $STALE | xargs git branch -D 2> /dev/null
    echo $STALE | xargs git push $REMOTE --delete
  else
    echo "Stale branches found:" $(echo -n $STALE | tr -s "\r\n" " " | tr -s " ")
    echo "Delete stale branches with ${0} -f"
  fi
fi

if [[ ! -z $(git rev-parse --verify --quiet "$CURRENT") ]]; then
  git checkout $CURRENT
else
  echo "Previous branch was stale, staying on $ROOT"
fi

if [[ ! -z $(git stash list | grep $STASH_STAMP) ]]; then
  if [[ "$APPLY_STASH" = true ]]; then
    git stash pop
  else
    echo "Stashed changes present, apply with: git stash pop"
  fi
fi

git gc --auto --prune=now
