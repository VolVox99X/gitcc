#!/usr/bin/env bash

usage () {
cat << EOD
Usage: git fresh [-fmrF] [-sl] [remote] [root]
By default, git-fresh will:
 - rebase against remote current branch 
 - stash changes
 - prune remote branches

-f: Delete stale local and remote branches
-m: Merge remote root into current branch
-r: Rebase current branch against remote root
-F: Reset local root to remote root, wipe workspace

-s: Apply stashed changes after run
-l: Only delete local stale branches

remote: remote name, origin by default
root: root branch, master by default
EOD

exit 0;
}

error () {
  echo -n "[git-fresh] error on line $1"
}

trap 'error $LINENO' ERR

while getopts ":fmrslF" opt; do
  case $opt in
    f)
      FORCE_DELETE_STALE=true
      ;;
    m)
      MERGE=true
      ;;
    r)
      REBASE=true
      ;;
    s)
      APPLY_STASH=true
      ;;
    l)
      DELETE_ONLY_LOCAL=true
      ;;
    F)
      FORCE_LOCAL_RESET=true
      ;;
    *)
      usage
      break
      ;;
  esac
done

shift $((OPTIND-1))

CURRENT=$(git rev-parse --abbrev-ref HEAD)
REMOTE=${1:-origin}
ROOT=${2:-master}

git remote update
git remote prune $REMOTE

STASH_STAMP=git-fresh-$(date +%s)

if ! git diff-files --quiet; then
  git stash save $STASH_STAMP
fi

git rebase $REMOTE $CURRENT

git checkout $ROOT > /dev/null 2>&1

if [[ "$FORCE_LOCAL_RESET" = true ]]; then
  git clean -dfx
  git reset --hard $REMOTE/$ROOT
else
  git rebase -q $REMOTE/$ROOT
fi

SMART_STALE=$(git branch -a --merged | tr -d "\* " | grep -Ev ">|$ROOT" | cat)

LOCAL_STALE=$(grep -Ev "^remotes/" <<< "$SMART_STALE" | cat)
REMOTE_STALE=$(grep -E "^remotes/" <<< "$SMART_STALE" | cat)
#todo: add flag to prune all remote branches
REMOTE_STALE=$(grep "^remotes/$REMOTE" <<< "$REMOTE_STALE" | cat)
REMOTE_STALE=${REMOTE_STALE//remotes\/$REMOTE\/}

if [[ ! -z "${SMART_STALE// }" ]]; then
  if [[ ! -z "${LOCAL_STALE// }" ]]; then
    STALE_BRANCHES=true
    if [[ "$FORCE_DELETE_STALE" = true ]]; then
      echo -n $LOCAL_STALE | xargs git branch -d 2> /dev/null
    else
      echo "Local stale branches found:" $(echo -n $LOCAL_STALE | tr "\n" " ")
    fi
  fi

  if [[ ! -z "${REMOTE_STALE// }" ]]; then
    STALE_BRANCHES=true
    if [[ "$FORCE_DELETE_STALE" = true ]]; then
      if [[ "$DELETE_ONLY_LOCAL" != true ]]; then
        echo -n $REMOTE_STALE | xargs git push $REMOTE --delete
      fi
    else
      echo "Remote stale branches found:" $(echo -n $REMOTE_STALE | tr "\n" " ")
    fi
  fi

  if [[ "$FORCE_DELETE_STALE" != true && "$STALE_BRANCHES" = true ]]; then
    echo "Delete stale branches with: git fresh -f"
  fi
fi

if [[ ! -z $(git rev-parse --verify --quiet "$CURRENT") ]]; then
  git checkout $CURRENT 2> /dev/null

  if [ "$REBASE" = true ] && [ "$MERGE" = true ]; then
    echo "Rebase and merge enabled, skipping both"
  else
    if [[ "$REBASE" = true ]]; then
      git rebase $REMOTE/$ROOT
    fi

    if [[ "$MERGE" = true ]]; then
      git merge --no-edit $REMOTE/$ROOT
    fi
  fi
else
  echo "$CURRENT branch was stale, staying on $ROOT"
fi

if [[ ! -z $(git stash list | grep $STASH_STAMP | cat) ]]; then
  if [[ "$APPLY_STASH" = true ]]; then
    git stash pop
  else
    echo "Stashed changes present, apply with: git stash pop"
  fi
fi

git gc --auto --prune=now
