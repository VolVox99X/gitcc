#!/usr/bin/env bash

usage () {
  echo "Usage: git fresh [-frsF] [remote] [root]"
  echo "-f: Delete stale local and remote branches"
  echo "-r: Rebase current branch against remote root"
  echo "-s: Apply stashed changes after run"
  echo "-F: Reset local root to remote root, wipe workspace"
  echo "remote: remote name, origin by default"
  echo "root: root branch, master by default"
  exit 1;
}

while getopts "fsrF" opt; do
  case $opt in
    f)
      FORCE_DELETE_STALE=true
      ;;
    s)
      APPLY_STASH=true
      ;;
    r)
      REBASE=true
      ;;
    F)
      FORCE_LOCAL_RESET=true
      ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

CURRENT=$(git rev-parse --abbrev-ref HEAD)
REMOTE=${1:-origin}
ROOT=${2:-master}

git remote update
git remote prune $REMOTE

STASH_STAMP=git-fresh-$(date +%s)
git stash save -q $STASH_STAMP
git checkout $ROOT 2> /dev/null

SMART_STALE=$(git branch -a --merged | tr -d "\*" | tr -s " " | grep -Ev ">|$ROOT")

LOCAL_STALE=$(grep -v "remotes/" <<< "$SMART_STALE")
REMOTE_STALE=$(grep "remotes/" <<< "$SMART_STALE")
REMOTE_STALE=${REMOTE_STALE//remotes\/$REMOTE\/}

if [[ ! -z "${SMART_STALE// }" ]]; then
  if [[ "$FORCE_DELETE_STALE" = true ]]; then
    echo -n $LOCAL_STALE | xargs git branch -d 2> /dev/null
    echo -n $REMOTE_STALE | xargs git push $REMOTE --delete
  else
    echo "Local stale branches found:" $(echo -n $LOCAL_STALE | tr "\n" " ")
    echo "Remote stale branches found:" $(echo -n $REMOTE_STALE | tr "\n" " ")
    echo "Delete stale branches with: git fresh -f"
  fi
fi

if [[ "$FORCE_LOCAL_RESET" = true ]]; then
  git clean -dfx
  git reset --hard $REMOTE/$ROOT
else
  git rebase -q $REMOTE/$ROOT
fi

if [[ ! -z $(git rev-parse --verify --quiet "$CURRENT") ]]; then
  git checkout $CURRENT 2> /dev/null
  if [[ "$REBASE" = true ]]; then
    git rebase $REMOTE/$ROOT
  fi
else
  echo "$CURRENT branch was stale, staying on $ROOT"
fi

if [[ ! -z $(git stash list | grep $STASH_STAMP) ]]; then
  if [[ "$APPLY_STASH" = true ]]; then
    git stash pop
  else
    echo "Stashed changes present, apply with: git stash pop"
  fi
fi

git gc --auto --prune=now
